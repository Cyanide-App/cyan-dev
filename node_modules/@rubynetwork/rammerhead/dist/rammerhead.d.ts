import { default as crh } from '@rubynetwork/rh/src/server/index.js';
type logLevel = "disabled" | "debug" | "traffic" | "info" | "warn" | "error";
interface Options {
    logLevel?: logLevel;
    reverseProxy?: boolean;
    disableLocalStorageSync?: boolean;
    disableHttp2?: boolean;
}
declare function shouldRouteRh(req: any): boolean;
declare function routeRhRequest(rh: crh, req: any, res: any): void;
declare function routeRhUpgrade(rh: crh, req: any, socket: any, head: any): void;
declare function createRammerhead(options: Options): any;
declare const rammerhead: {
    shouldRouteRh: typeof shouldRouteRh;
    routeRhRequest: typeof routeRhRequest;
    routeRhUpgrade: typeof routeRhUpgrade;
    createRammerhead: typeof createRammerhead;
};
export default rammerhead;
export { createRammerhead, shouldRouteRh, routeRhRequest, routeRhUpgrade, logLevel };
//# sourceMappingURL=rammerhead.d.ts.map