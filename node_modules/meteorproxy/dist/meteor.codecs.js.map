{
  "version": 3,
  "sources": ["../src/codecs/locvar.ts", "../src/codecs/index.ts"],
  "sourcesContent": ["// made by `interpolation-0`\nimport type { Codec } from '@/types'\n\nconst factory = (key: string) => {\n  const getShuffledAlphabet = () => {\n    const alphabet =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n    return shuffle(alphabet, key)\n  }\n  const shuffle = (alphabet: string, key: string) => {\n    const shuffledAlphabet = [...alphabet]\n\n    for (let i = 0; i < key.length; i++) {\n      const charCode = key.charCodeAt(i) % alphabet.length\n      const shiftAmount = charCode < 0 ? charCode + alphabet.length : charCode\n\n      for (let j = 0; j < alphabet.length; j++) {\n        const newIndex = (j + shiftAmount) % alphabet.length\n        const temp = shuffledAlphabet[j]\n        shuffledAlphabet[j] = shuffledAlphabet[newIndex]\n        shuffledAlphabet[newIndex] = temp\n      }\n    }\n\n    return shuffledAlphabet.join('')\n  }\n\n  const base64Encode = (text: string) => {\n    const shuffledAlphabet = getShuffledAlphabet()\n    const alphabet =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    return [...btoa(text)]\n      .map((char) => {\n        const index = alphabet.indexOf(char)\n        return index !== -1 ? shuffledAlphabet[index] : char\n      })\n      .join('')\n  }\n\n  const base64Decode = (encodedText: string) => {\n    const shuffledAlphabet = getShuffledAlphabet()\n    const alphabet =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    return atob(\n      [...encodedText]\n        .map((char) => {\n          const index = shuffledAlphabet.indexOf(char)\n          return index !== -1 ? alphabet[index] : char\n        })\n        .join('')\n    )\n  }\n\n  return {\n    encode: base64Encode,\n    decode: (encodedText: string) => {\n      if (encodedText.includes('?')) {\n        encodedText = base64Encode(\n          `${base64Decode(encodedText.split('?')[0])}?${encodedText.split('?')[1]}`\n        )\n      }\n      return base64Decode(encodedText)\n    }\n  }\n}\n\nexport const locationvariable: Codec = factory(\n  (location.origin + navigator.userAgent).toUpperCase()\n)\n", "import type { Codec } from '@/types'\nimport { locationvariable } from './locvar'\n\nexport const codecs: Record<string, Codec> = {\n  locvar: locationvariable,\n  base64: {\n    encode(string) {\n      return encodeURIComponent(btoa(string))\n    },\n    decode(string) {\n      return decodeURIComponent(atob(string))\n    }\n  },\n\n  xor: {\n    encode(str) {\n      if (!str) return str\n      return encodeURIComponent(\n        str\n          .toString()\n          .split('')\n          .map((char, ind) =>\n            ind % 2 ? String.fromCharCode(char.charCodeAt(0) ^ 2) : char\n          )\n          .join('')\n      )\n    },\n    decode(str) {\n      if (!str) return str\n      const [input, ...search] = str.split('?')\n\n      return (\n        decodeURIComponent(input)\n          .split('')\n          .map((char, ind) =>\n            ind % 2 ? String.fromCharCode(char.charCodeAt(0) ^ 2) : char\n          )\n          .join('') + (search.length ? `?${search.join('?')}` : '')\n      )\n    }\n  },\n\n  plain: {\n    encode(string) {\n      return encodeURIComponent(string)\n    },\n\n    decode(string) {\n      return decodeURIComponent(string)\n    }\n  }\n}\n\nself.$meteor_codecs = codecs\n"],
  "mappings": "MAGA,IAAMA,EAAWC,GAAgB,CAC/B,IAAMC,EAAsB,IAGnBC,EADL,mEACuBF,CAAG,EAExBE,EAAU,CAACC,EAAkBH,IAAgB,CACjD,IAAMI,EAAmB,CAAC,GAAGD,CAAQ,EAErC,QAASE,EAAI,EAAGA,EAAIL,EAAI,OAAQK,IAAK,CACnC,IAAMC,EAAWN,EAAI,WAAWK,CAAC,EAAIF,EAAS,OACxCI,EAAcD,EAAW,EAAIA,EAAWH,EAAS,OAASG,EAEhE,QAASE,EAAI,EAAGA,EAAIL,EAAS,OAAQK,IAAK,CACxC,IAAMC,GAAYD,EAAID,GAAeJ,EAAS,OACxCO,EAAON,EAAiBI,CAAC,EAC/BJ,EAAiBI,CAAC,EAAIJ,EAAiBK,CAAQ,EAC/CL,EAAiBK,CAAQ,EAAIC,CAC/B,CACF,CAEA,OAAON,EAAiB,KAAK,EAAE,CACjC,EAEMO,EAAgBC,GAAiB,CACrC,IAAMR,EAAmBH,EAAoB,EACvCE,EACJ,mEACF,MAAO,CAAC,GAAG,KAAKS,CAAI,CAAC,EAClB,IAAKC,GAAS,CACb,IAAMC,EAAQX,EAAS,QAAQU,CAAI,EACnC,OAAOC,IAAU,GAAKV,EAAiBU,CAAK,EAAID,CAClD,CAAC,EACA,KAAK,EAAE,CACZ,EAEME,EAAgBC,GAAwB,CAC5C,IAAMZ,EAAmBH,EAAoB,EACvCE,EACJ,mEACF,OAAO,KACL,CAAC,GAAGa,CAAW,EACZ,IAAKH,GAAS,CACb,IAAMC,EAAQV,EAAiB,QAAQS,CAAI,EAC3C,OAAOC,IAAU,GAAKX,EAASW,CAAK,EAAID,CAC1C,CAAC,EACA,KAAK,EAAE,CACZ,CACF,EAEA,MAAO,CACL,OAAQF,EACR,OAASK,IACHA,EAAY,SAAS,GAAG,IAC1BA,EAAcL,EACZ,GAAGI,EAAaC,EAAY,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,IAAIA,EAAY,MAAM,GAAG,EAAE,CAAC,CAAC,EACzE,GAEKD,EAAaC,CAAW,EAEnC,CACF,EAEaC,EAA0BlB,GACpC,SAAS,OAAS,UAAU,WAAW,YAAY,CACtD,ECjEO,IAAMmB,EAAgC,CAC3C,OAAQC,EACR,OAAQ,CACN,OAAOC,EAAQ,CACb,OAAO,mBAAmB,KAAKA,CAAM,CAAC,CACxC,EACA,OAAOA,EAAQ,CACb,OAAO,mBAAmB,KAAKA,CAAM,CAAC,CACxC,CACF,EAEA,IAAK,CACH,OAAOC,EAAK,CACV,OAAKA,GACE,mBACLA,EACG,SAAS,EACT,MAAM,EAAE,EACR,IAAI,CAACC,EAAMC,IACVA,EAAM,EAAI,OAAO,aAAaD,EAAK,WAAW,CAAC,EAAI,CAAC,EAAIA,CAC1D,EACC,KAAK,EAAE,CACZ,CACF,EACA,OAAOD,EAAK,CACV,GAAI,CAACA,EAAK,OAAOA,EACjB,GAAM,CAACG,EAAO,GAAGC,CAAM,EAAIJ,EAAI,MAAM,GAAG,EAExC,OACE,mBAAmBG,CAAK,EACrB,MAAM,EAAE,EACR,IAAI,CAACF,EAAMC,IACVA,EAAM,EAAI,OAAO,aAAaD,EAAK,WAAW,CAAC,EAAI,CAAC,EAAIA,CAC1D,EACC,KAAK,EAAE,GAAKG,EAAO,OAAS,IAAIA,EAAO,KAAK,GAAG,CAAC,GAAK,GAE5D,CACF,EAEA,MAAO,CACL,OAAOL,EAAQ,CACb,OAAO,mBAAmBA,CAAM,CAClC,EAEA,OAAOA,EAAQ,CACb,OAAO,mBAAmBA,CAAM,CAClC,CACF,CACF,EAEA,KAAK,eAAiBF",
  "names": ["factory", "key", "getShuffledAlphabet", "shuffle", "alphabet", "shuffledAlphabet", "i", "charCode", "shiftAmount", "j", "newIndex", "temp", "base64Encode", "text", "char", "index", "base64Decode", "encodedText", "locationvariable", "codecs", "locationvariable", "string", "str", "char", "ind", "input", "search"]
}
