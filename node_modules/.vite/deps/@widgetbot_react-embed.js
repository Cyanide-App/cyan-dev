import {
  __commonJS,
  require_react
} from "./chunk-2YIMICFJ.js";

// node_modules/@widgetbot/embed-api/dist/api.js
var require_api = __commonJS({
  "node_modules/@widgetbot/embed-api/dist/api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var API = class {
      constructor() {
        this.listeners = {};
      }
      socketEvent(raw) {
        try {
          var message = JSON.parse(raw);
        } catch (e) {
          return;
        }
        if (message instanceof Object && message.widgetbot === true && message.id === this.id) {
          const { event, data } = message;
          const listeners = this.listeners[event];
          if (listeners) {
            listeners.forEach((listener) => listener(data));
          }
        }
      }
      /**
       * Listens to events from the client
       * @param event Event name
       * @param callback Event callback
       */
      on(event, callback) {
        if (!this.listeners[event])
          this.listeners[event] = [];
        const listeners = this.listeners[event];
        listeners.push(callback);
        console.debug(`[embed-api] on '${String(event)}'`, callback);
      }
      /**
       * Remove a listener from an event from the client
       * @param event Event name
       * @param callback Event callback
       */
      removeListener(event, callback) {
        if (!this.listeners[event])
          return;
        this.listeners[event] = this.listeners[event].filter((x) => x === callback);
        console.debug(`[embed-api] removeListener '${String(event)}'`, callback);
      }
    };
    exports.default = API;
  }
});

// node_modules/@widgetbot/embed-api/dist/client.js
var require_client = __commonJS({
  "node_modules/@widgetbot/embed-api/dist/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var api_1 = require_api();
    var Client = class extends api_1.default {
      constructor(options) {
        super();
        this.server = {
          emit: (event, data) => {
            const listeners = this.listeners[event];
            if (listeners) {
              listeners.forEach((listener) => listener(data));
            }
          }
        };
        Object.assign(this, options);
        window.addEventListener("message", ({ data }) => this.socketEvent(data));
      }
      /**
       * Emits an event to the client
       * @param event Event name
       * @param data Event data
       */
      emit(event, data) {
        if (!window.parent)
          return false;
        const parsed = JSON.stringify({
          widgetbot: true,
          id: this.id,
          event,
          data
        });
        if (this.iframe.contentWindow) {
          this.iframe.contentWindow.postMessage(parsed, "*");
          return true;
        }
        return false;
      }
    };
    exports.default = Client;
  }
});

// node_modules/@widgetbot/embed-api/dist/server.js
var require_server = __commonJS({
  "node_modules/@widgetbot/embed-api/dist/server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var api_1 = require_api();
    var Server = class extends api_1.default {
      constructor(options) {
        super();
        this.targetOrigin = "*";
        this.client = {
          emit: (event, data) => {
            const listeners = this.listeners[event];
            if (listeners) {
              listeners.forEach((listener) => listener(data));
            }
          }
        };
        Object.assign(this, options);
        window.addEventListener("message", ({ data }) => this.socketEvent(data));
      }
      /**
       * Emits an event to the client
       * @param event Event name
       * @param data Event data
       */
      emit(event, data) {
        console.debug(`[embed-api] emit '${event}'`, data);
        if (!window.parent)
          return false;
        const parsed = JSON.stringify({
          widgetbot: true,
          id: this.id,
          event,
          data
        });
        window.parent.postMessage(parsed, this.targetOrigin);
        return true;
      }
    };
    exports.default = Server;
  }
});

// node_modules/@widgetbot/embed-api/dist/index.js
var require_dist = __commonJS({
  "node_modules/@widgetbot/embed-api/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Server = exports.Client = exports.API = void 0;
    var api_1 = require_api();
    Object.defineProperty(exports, "API", { enumerable: true, get: function() {
      return api_1.default;
    } });
    var client_1 = require_client();
    Object.defineProperty(exports, "Client", { enumerable: true, get: function() {
      return client_1.default;
    } });
    var server_1 = require_server();
    Object.defineProperty(exports, "Server", { enumerable: true, get: function() {
      return server_1.default;
    } });
  }
});

// node_modules/@widgetbot/react-embed/dist/elements.js
var require_elements = __commonJS({
  "node_modules/@widgetbot/react-embed/dist/elements.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Embed = exports.Root = void 0;
    var Root = ({ width, height }) => Object.assign(Object.assign(Object.assign({}, height && { height: +height ? `${height}px` : height }), width && { width: +width ? `${width}px` : width }), { display: "inline-block", overflow: "hidden", backgroundColor: "rgb(54, 57, 62)", borderRadius: 7, verticalAlign: "top" });
    exports.Root = Root;
    exports.Embed = {
      width: "100%",
      height: "100%",
      border: "none"
    };
  }
});

// node_modules/@widgetbot/react-embed/dist/util.js
var require_util = __commonJS({
  "node_modules/@widgetbot/react-embed/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.searchParams = exports.generateUUID = void 0;
    function generateUUID() {
      let d = (/* @__PURE__ */ new Date()).getTime();
      if (typeof performance !== "undefined" && typeof performance.now === "function") {
        d += performance.now();
      }
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        let r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === "x" ? r : r & 3 | 8).toString(16);
      });
    }
    exports.generateUUID = generateUUID;
    var searchParams = (obj = {}) => "?" + Object.keys(obj).map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`).join("&");
    exports.searchParams = searchParams;
  }
});

// node_modules/@widgetbot/react-embed/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@widgetbot/react-embed/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var embed_api_1 = require_dist();
    var React = require_react();
    var elements_1 = require_elements();
    var util_1 = require_util();
    var WidgetBot = class extends React.PureComponent {
      constructor() {
        super(...arguments);
        this.state = {
          url: null,
          id: (0, util_1.generateUUID)()
        };
        this.api = new embed_api_1.Client({
          id: this.state.id,
          iframe: null
        });
      }
      static getDerivedStateFromProps(props, state) {
        let shard = props.shard;
        if (!shard.startsWith("http"))
          shard = `https://${shard}`;
        if (shard.endsWith("/"))
          shard = shard.substring(0, shard.length - 1);
        let params = Object.assign(Object.assign({}, props.options), { api: state.id });
        if (props.thread)
          params.thread = props.thread;
        if (props.username)
          params.username = props.username;
        if (props.avatar)
          params.avatar = props.avatar;
        if (props.token)
          params.token = props.token;
        if (props.notifications)
          params.notifications = props.notifications;
        if (props.notificationTimeout)
          params.notificationtimeout = props.notificationTimeout;
        if (props.accessibility)
          params.accessibility = props.accessibility.join();
        if (props.settingsGroup)
          params["settings-group"] = props.settingsGroup;
        const url = `${shard}/channels/${props.server}${props.channel ? `/${props.channel}` : ""}/${(0, util_1.searchParams)(params)}`;
        return { url };
      }
      componentDidMount() {
        const { onAPI } = this.props;
        if (onAPI)
          onAPI(this.api);
      }
      render() {
        const { defer, className, style, height, width, focusable } = this.props;
        return React.createElement(
          "div",
          { className, style: Object.assign(Object.assign({}, (0, elements_1.Root)({ width, height })), style) },
          React.createElement("iframe", { src: defer ? "" : this.state.url, ref: (ref) => this.api.iframe = ref, style: elements_1.Embed, tabIndex: focusable ? null : -1, allow: "clipboard-write; fullscreen", title: "Discord chat embed" })
        );
      }
    };
    WidgetBot.defaultProps = {
      server: "299881420891881473",
      shard: "https://e.widgetbot.io",
      options: {},
      defer: false,
      focusable: true
    };
    exports.default = WidgetBot;
  }
});
export default require_dist2();
//# sourceMappingURL=@widgetbot_react-embed.js.map
