import {
  require_jsx_runtime
} from "./chunk-RLMGAKMB.js";
import {
  __toESM,
  require_react
} from "./chunk-2YIMICFJ.js";

// node_modules/react-emulatorjs/dist/index.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var defaultSize = {
  width: 640,
  height: 480
};
var buildEmulator = ({
  loader,
  width = defaultSize.width,
  height = defaultSize.height
}) => {
  const html = document.createElement("html");
  html.innerHTML = `
<html>
  <head>
    <style>body, html { margin: 0; padding: 0; }</style>
  </head>
  <body>
    <div style="width: ${width}px; height: ${height}px; max-width: 100%">   
      <div id="game"></div>
    </div>
    <script>
      setTimeout(() => {
        let script = document.createElement("script");
        script.src = "${loader}";
        document.body.append(script);        
      }, 200)
    <\/script>
  </body>
</html>
`;
  return html;
};
var cdnPathToDataUrls = [
  "https://cdn.emulatorjs.org/stable/data",
  "https://cdn.emulatorjs.org/latest/data",
  "https://cdn.emulatorjs.org/nightly/data"
];
var defaultPathToData = cdnPathToDataUrls[0];
var EmulatorJS = (props) => {
  const iframeRef = (0, import_react.useRef)(null);
  const setIframeGlobals = (0, import_react.useCallback)(() => {
    const iframeGlobal = iframeRef.current.contentWindow.globalThis;
    iframeGlobal.EJS_player = "#game";
    if (!props.EJS_pathtodata)
      iframeGlobal.EJS_pathtodata = defaultPathToData;
    if (!props.EJS_gameName)
      iframeGlobal.EJS_gameName = "gameNamePlaceholder";
    for (const key in props) {
      iframeGlobal[key] = props[key];
    }
  }, [props]);
  (0, import_react.useEffect)(() => {
    if (!iframeRef.current)
      return;
    const oldDoc = iframeRef.current.contentDocument;
    const timer = setInterval(() => {
      if (!iframeRef.current)
        return;
      const newDoc = iframeRef.current.contentDocument;
      if (newDoc == oldDoc)
        return;
      setIframeGlobals();
      clearInterval(timer);
    }, 100);
  }, [setIframeGlobals]);
  const width = props.width || defaultSize.width;
  const height = props.height || defaultSize.height;
  const html = buildEmulator({
    loader: `${props.EJS_pathtodata || defaultPathToData}/loader.js`,
    width,
    height
  }).innerHTML;
  return (0, import_jsx_runtime.jsx)(
    "iframe",
    {
      ref: iframeRef,
      srcDoc: html,
      style: { border: 0, width: `${width}px`, height: `${height}px` }
    }
  );
};
var platforms = [
  {
    id: "3do",
    name: "3DO",
    cores: ["opera"],
    bioses: [
      {
        name: "panafz1.bin",
        description: "Panasonic FZ-1"
      },
      {
        name: "panafz10.bin",
        description: "Panasonic FZ-10"
      },
      {
        name: "panafz10-norsa.bin",
        description: "Panasonic FZ-10 [RSA Patch]"
      },
      {
        name: "panafz10e-anvil.bin",
        description: "Panasonic FZ-10-E [Anvil]"
      },
      {
        name: "panafz10e-anvil-norsa.bin",
        description: "Panasonic FZ-10-E [Anvil RSA Patch]"
      },
      {
        name: "panafz1j.bin",
        description: "Panasonic FZ-1J"
      },
      {
        name: "panafz1j-norsa.bin",
        description: "Panasonic FZ-1J [RSA Patch]"
      },
      {
        name: "goldstar.bin",
        description: "Goldstar GDO-101M"
      },
      {
        name: "sanyotry.bin",
        description: "Sanyo IMP-21J TRY"
      },
      {
        name: "3do_arcade_saot.bin",
        description: "Shootout At Old Tucson"
      }
    ]
  },
  {
    id: "arcade",
    name: "Arcade",
    cores: ["fbneo", "fbalpha2012_cps1", "fbalpha2012_cps2"]
  },
  {
    id: "atari2600",
    name: "Atari 2600",
    cores: ["stella2014"]
  },
  {
    id: "atari5200",
    name: "Atari 5200",
    cores: ["a5200"]
  },
  {
    id: "atari7800",
    name: "Atari 7800",
    cores: ["prosystem"],
    bioses: [
      {
        name: "7800 BIOS (U).rom",
        description: "7800 BIOS - Optional"
      }
    ]
  },
  {
    id: "jaguar",
    name: "Atari Jaguar",
    cores: ["virtualjaguar"]
  },
  {
    id: "lynx",
    name: "Atari Lynx",
    cores: ["handy"],
    bioses: [
      {
        name: "lynxboot.img",
        description: "Lynx Boot Image - Required"
      }
    ]
  },
  {
    id: "mame2003",
    name: "MAME 2003",
    cores: ["mame2003"]
  },
  {
    id: "nes",
    name: "NES / Famicom",
    cores: ["fceumm", "nestopia"],
    bioses: [
      {
        name: "disksys.rom",
        description: "Family Computer Disk System BIOS - Required for Famicom Disk System emulation"
      },
      {
        name: "gamegenie.nes",
        description: "Game Genie add-on cartridge - Required for Game Genei Add-on emulation (Only supported on the fceumm core)"
      }
    ]
  },
  {
    id: "n64",
    name: "Nintendo 64",
    cores: ["mupen64plus_next"]
  },
  {
    id: "nds",
    name: "Nintendo DS",
    cores: ["melonds", "desmume2015"],
    bioses: [
      {
        name: "bios7.bin",
        description: "NDS ARM7 BIOS - Required"
      },
      {
        name: "bios9.bin",
        description: "NDS ARM9 BIOS - Required"
      },
      {
        name: "firmware.bin",
        description: "NDS Firmware - Required"
      },
      {
        name: "dsi_bios7.bin",
        description: "DSi ARM7 BIOS - Optional"
      },
      {
        name: "dsi_bios9.bin",
        description: "DSi ARM9 BIOS - Optional"
      },
      {
        name: "dsi_firmware.bin",
        description: "DSi Firmware - Optional"
      },
      {
        name: "dsi_nand.bin",
        description: "DSi NAND - Optional"
      },
      {
        name: "dsi_sd_card.bin",
        description: "DSi SD Card - Optional"
      }
    ]
  },
  {
    id: "gba",
    name: "Nintendo GameBoy Advance",
    cores: ["mgba"],
    bioses: [
      {
        name: "gb_bios.bin",
        description: "Game Boy BIOS - Optional"
      },
      {
        name: "gbc_bios.bin",
        description: "Game Boy Color BIOS - Optional"
      },
      {
        name: "gba_bios.bin",
        description: "Game Boy Advance BIOS - Optional"
      },
      {
        name: "sgb_bios.bin",
        description: "Super Game Boy BIOS - Optional"
      }
    ]
  },
  {
    id: "gb",
    name: "Nintendo GameBoy",
    cores: ["gambatte", "mgba"]
  },
  {
    id: "psx",
    name: "PlayStation",
    cores: ["mednafen_psx", "pcsx_rearmed"],
    bioses: [
      {
        name: "scph5500.bin",
        description: "PS1 JP BIOS - Required for JP games"
      },
      {
        name: "scph5501.bin",
        description: "PS1 US BIOS - Required for US games"
      },
      {
        name: "scph5502.bin",
        description: "PS1 EU BIOS - Required for EU games"
      },
      {
        name: "PSXONPSP660.bin",
        description: "Extracted from a PSP"
      },
      {
        name: "scph101.bin",
        description: "Version 4.4 03/24/00 A"
      },
      {
        name: "scph7001.bin",
        description: "Version 4.1 12/16/97 A"
      },
      {
        name: "scph1001.bin",
        description: "Version 2.0 05/07/95 A"
      }
    ]
  },
  {
    id: "sega32x",
    name: "Sega 32X",
    cores: ["picodrive"]
  },
  {
    id: "segaCD",
    name: "Sega CD",
    cores: ["genesis_plus_gx", "picodrive"],
    bioses: [
      {
        name: "bios_CD_E.bin",
        description: "MegaCD EU BIOS - Required"
      },
      {
        name: "bios_CD_U.bin",
        description: "SegaCD US BIOS - Required"
      },
      {
        name: "bios_CD_J.bin",
        description: "MegaCD JP BIOS - Required"
      }
    ]
  },
  {
    id: "segaGG",
    name: "Sega Game Gear",
    cores: ["genesis_plus_gx"],
    bioses: [
      {
        name: "bios.gg",
        description: "GameGear BIOS (bootrom) - Optional"
      }
    ]
  },
  {
    id: "segaMS",
    name: "Sega Master System",
    cores: ["genesis_plus_gx", "picodrive"],
    bioses: [
      {
        name: "bios_E.sms",
        description: "MasterSystem EU BIOS"
      },
      {
        name: "bios_U.sms",
        description: "MasterSystem US BIOS"
      },
      {
        name: "bios_J.sms",
        description: "MasterSystem JP BIOS"
      }
    ]
  },
  {
    id: "segaMD",
    name: "Sega Mega Drive",
    cores: ["genesis_plus_gx", "picodrive"],
    bioses: [
      {
        name: "bios_MD.bin",
        description: "MegaDrive TMSS startup ROM"
      }
    ]
  },
  {
    id: "segaSaturn",
    name: "Sega Saturn",
    cores: ["yabause"],
    bioses: [
      {
        name: "saturn_bios.bin",
        description: "Saturn BIOS"
      }
    ]
  },
  {
    id: "snes",
    name: "SNES",
    cores: ["snes9x"],
    bioses: [
      {
        name: "BS-X.bin",
        description: "BS-X - Sore wa Namae o Nusumareta Machi no Monogatari (Japan) (Rev 1) - Optional"
      },
      {
        name: "STBIOS.bin",
        description: "Sufami Turbo (Japan) - Optional"
      }
    ]
  },
  {
    id: "vb",
    name: "Virtual Boy",
    cores: ["beetle_vb"]
  },
  {
    id: "pce",
    name: "PC Engine/TurboGrafx 16 (CD)/SuperGrafx",
    cores: ["mednafen_pce"]
  },
  {
    id: "pcfx",
    name: "PC-FX",
    cores: ["mednafen_pcfx"]
  },
  {
    id: "ngp",
    name: "Neo Geo Pocket (Color)",
    cores: ["mednafen_ngp"]
  },
  {
    id: "ws",
    name: "WonderSwan",
    cores: ["mednafen_wswan"]
  },
  {
    id: "coleco",
    name: "ColecoVision",
    cores: ["gearcoleco"]
  },
  {
    id: "c64",
    name: "Commodore 64",
    cores: ["vice_x64"]
  },
  {
    id: "amiga",
    name: "Commodore - Amiga",
    cores: ["puae"]
  }
];
var defaultBiosesUrls = {
  "panafz1.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/panafz1.bin",
  "panafz10.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/panafz10.bin",
  "panafz10-norsa.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/panafz10-norsa.bin",
  "panafz10e-anvil.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/panafz10e-anvil.bin",
  "panafz10e-anvil-norsa.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/panafz10e-anvil-norsa.bin",
  "panafz1j.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/panafz1j.bin",
  "panafz1j-norsa.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/panafz1j-norsa.bin",
  "goldstar.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/goldstar.bin",
  "sanyotry.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/sanyotry.bin",
  "3do_arcade_saot.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/3DO%20Company%2C%20The%20-%203DO/3do_arcade_saot.bin",
  "7800 BIOS (U).rom": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Atari%20-%207800/7800%20BIOS%20(U).rom",
  "lynxboot.img": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Atari%20-%20Lynx/lynxboot.img",
  "disksys.rom": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Famicom%20Disk%20System/disksys.rom",
  "gamegenie.nes": void 0,
  "bios7.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Nintendo%20DS/bios7.bin",
  "bios9.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Nintendo%20DS/bios9.bin",
  "firmware.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Nintendo%20DS/firmware.bin",
  "dsi_bios7.bin": void 0,
  "dsi_bios9.bin": void 0,
  "dsi_firmware.bin": void 0,
  "dsi_nand.bin": void 0,
  "dsi_sd_card.bin": void 0,
  "gb_bios.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Gameboy/gb_bios.bin",
  "gbc_bios.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Gameboy%20Color/gbc_bios.bin",
  "gba_bios.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Game%20Boy%20Advance/gba_bios.bin",
  "sgb_bios.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Super%20Game%20Boy/sgb_bios.bin",
  "scph5500.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sony%20-%20PlayStation/scph5500.bin",
  "scph5501.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sony%20-%20PlayStation/scph5501.bin",
  "scph5502.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sony%20-%20PlayStation/scph5502.bin",
  "PSXONPSP660.bin": void 0,
  "scph101.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sony%20-%20PlayStation/scph101.bin",
  "scph7001.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sony%20-%20PlayStation/scph7001.bin",
  "scph1001.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sony%20-%20PlayStation/scph1001.bin",
  "bios_CD_E.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Mega%20CD%20-%20Sega%20CD/bios_CD_E.bin",
  "bios_CD_U.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Mega%20CD%20-%20Sega%20CD/bios_CD_U.bin",
  "bios_CD_J.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Mega%20CD%20-%20Sega%20CD/bios_CD_J.bin",
  "bios.gg": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Game%20Gear/bios.gg",
  "bios_E.sms": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Master%20System%20-%20Mark%20III/bios_E.sms",
  "bios_U.sms": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Master%20System%20-%20Mark%20III/bios_U.sms",
  "bios_J.sms": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Master%20System%20-%20Mark%20III/bios_J.sms",
  "bios_MD.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Mega%20Drive%20-%20Genesis/bios_MD.bin",
  "saturn_bios.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Sega%20-%20Saturn/saturn_bios.bin",
  "BS-X.bin": "https://cdn.statically.io/gh/Abdess/retroarch_system/libretro/Nintendo%20-%20Satellaview/BS-X.bin",
  "STBIOS.bin": "https://github.com/Abdess/retroarch_system/blob/libretro/Nintendo%20-%20SuFami%20Turbo/STBIOS.bin"
};
var getPlatforms = (biosesUrls = defaultBiosesUrls) => {
  return platforms.map((platform) => {
    var _a;
    return {
      ...platform,
      bioses: (_a = platform.bioses) == null ? void 0 : _a.map((bios) => ({
        ...bios,
        url: biosesUrls[bios.name]
      }))
    };
  });
};
var isBios = (value) => {
  if (value && typeof value === "object" && "name" in value && "descriptions" in value && "url" in value)
    return true;
  return false;
};
var findCoreBioses = (core, biosesUrls = defaultBiosesUrls) => {
  const platforms2 = getPlatforms(biosesUrls);
  const foundByPlatformId = platforms2.find(({ id }) => id === core);
  if (foundByPlatformId && foundByPlatformId.bioses)
    return foundByPlatformId.bioses;
  const foundByPlatformCore = platforms2.find(
    ({ cores }) => (
      // @ts-ignore
      cores.includes(core)
    )
  );
  if (foundByPlatformCore && foundByPlatformCore.bioses)
    return foundByPlatformCore.bioses;
};
var languages = {
  "en-US": "English",
  "pt-BR": "Portuguese",
  "es-ES": "Spanish",
  "el-GR": "Greek",
  "ja-JA": "Japanese",
  "zh-CN": "Chinese",
  "hi-HI": "Hindi",
  "ar-AR": "Arabic",
  "jv-JV": "Javanese",
  "ben-BEN": "Bengali",
  "ru-RU": "Russian",
  "de-GER": "German",
  "ko-KO": "Korean",
  "af-FR": "French"
};
export {
  EmulatorJS,
  cdnPathToDataUrls,
  defaultBiosesUrls,
  defaultPathToData,
  findCoreBioses,
  getPlatforms,
  isBios,
  languages,
  platforms
};
//# sourceMappingURL=react-emulatorjs.js.map
