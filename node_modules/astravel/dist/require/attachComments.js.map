{"version":3,"sources":["../../src/attachComments.js"],"names":["attachCommentsToNode","traveler","state","parent","children","findHeadingComments","index","comments","comment","boundComments","trailingComments","length","end","push","start","type","i","child","loc","line","Block","node","body","defaultTraveler","makeChild","Program","BlockStatement","ClassBody","ObjectExpression","properties","ArrayExpression","elements","SwitchStatement","cases","SwitchCase","consequent","attachComments"],"mappings":"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","sourcesContent":["import { defaultTraveler } from './defaultTraveler'\n\nfunction attachCommentsToNode(\n  traveler,\n  state,\n  parent,\n  children,\n  findHeadingComments,\n) {\n  let { index } = state\n  const { comments } = state\n  let comment = comments[index]\n  // Hack to tackle https://github.com/babel/minify/issues/866\n  let boundComments, trailingComments\n  if (comment == null) {\n    return\n  }\n  if (children == null || children.length === 0) {\n    // No children, attach comments to parent\n    boundComments = parent.comments != null ? parent.comments : []\n    while (comment != null && comment.end <= parent.end) {\n      boundComments.push(comment)\n      comment = comments[++index]\n    }\n    state.index = index\n    if (boundComments.length !== 0 && parent.comments == null) {\n      parent.comments = boundComments\n    }\n    return\n  }\n  // Look for heading block comments not immediately followed by a child\n  if (findHeadingComments) {\n    boundComments = parent.comments != null ? parent.comments : []\n    const { start } = children[0]\n    while (\n      comment != null &&\n      (comment.type[0] === 'B' || comment.type[0] === 'M') &&\n      comment.end <= start\n    ) {\n      boundComments.push(comment)\n      comment = comments[++index]\n    }\n    if (boundComments.length !== 0 && parent.comments == null)\n      parent.comments = boundComments\n  }\n  // Attach comments to children\n  for (let i = 0, { length } = children; comment != null && i < length; i++) {\n    const child = children[i]\n    boundComments = []\n    while (comment != null && comment.end <= child.start) {\n      boundComments.push(comment)\n      comment = comments[++index]\n    }\n    // Check if next comment is line comment and on the same line if location is provided\n    if (\n      comment != null &&\n      comment.loc != null &&\n      (comment.type[0] === 'L' || comment.type[0] === 'S')\n    ) {\n      if (comment.loc.start.line === child.loc.end.line) {\n        boundComments.push(comment)\n        comment = comments[++index]\n      }\n    }\n    if (boundComments.length !== 0) {\n      child.comments = boundComments\n    }\n    // Travel through child\n    state.index = index\n    traveler[child.type](child, state)\n    index = state.index\n    comment = comments[index]\n  }\n  // Look for remaining comments\n  trailingComments = []\n  while (comment != null && comment.end <= parent.end) {\n    trailingComments.push(comment)\n    comment = comments[++index]\n  }\n  if (trailingComments.length !== 0) {\n    parent.trailingComments = trailingComments\n  }\n  state.index = index\n}\n\nfunction Block(node, state) {\n  attachCommentsToNode(this, state, node, node.body, true)\n}\n\nlet traveler = defaultTraveler.makeChild({\n  Program: Block,\n  BlockStatement: Block,\n  ClassBody: Block,\n  ObjectExpression(node, state) {\n    attachCommentsToNode(this, state, node, node.properties, true)\n  },\n  ArrayExpression(node, state) {\n    attachCommentsToNode(this, state, node, node.elements, true)\n  },\n  SwitchStatement(node, state) {\n    attachCommentsToNode(this, state, node, node.cases, false)\n  },\n  SwitchCase(node, state) {\n    attachCommentsToNode(this, state, node, node.consequent, false)\n  },\n  // TODO: Consider ArrayExpression ?\n})\n\nexport function attachComments(node, comments) {\n  /*\n  Modifies in-place the AST starting at `node` by attaching the provided `comments` and returns that AST.\n  */\n  traveler[node.type](node, {\n    comments,\n    index: 0,\n  })\n  return node\n}\n"],"file":"attachComments.js"}